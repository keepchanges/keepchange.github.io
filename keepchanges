#!/usr/bin/env bash

# This script preserve directories copy in backup store and
# it tracks changes in the directories since the last execution.
# In the special (keeping) store (different from the backup)
# this script preserve only changes.
# It uses the rsync program. See the 3 main lines below.

# The default settings:
CONFIG_FILE=/etc/keepchanges/keepchanges.conf
# KEEPCHANGES=/root/keepchanges
# TRACEABLE="/etc /usr/local/bin"
# ORIGSTORE=/var/cache/keepchanges
# LOGFILES=$KEEPCHANGES
# EXCLUDEFILE=keepchanges.exclude
# RSYNC_EXE=/usr/bin/rsync

function usage {
cat <<"USAGE_END"

Usage:	keepchanges [-c|d|r|t|l|e path_name] [-h] [-n] [-k] [-s] [-v]
	-c - The config file name, default:
	     "/etc/keepchanges/keepchanges.conf".
	All other default setups are in the config file.
	The command line parameters have the preferences:
	-d - the directory for keeps changes,
	-r - the traceable directory, can be plural in that case
	     should be in quotes with a space as delimeter,
	     can not have a space in the name,
	-t - the backup storage for the copy of the traceable directory,
	     we will be compare the current traceable directory content
	     with this copy, saved from the previous launch,
	-l - the backup storage for the log files,
	-e - the file name with a list of excluded files,
	     relative to the traceable directory,
	-h - help,
	-n - dry run, perform a trial run with no changes make,
	-k - keep changes without acknowledgement query,
	-s - sync changes without acknowledgement query,
	-v - be verbose.
USAGE_END
}

function parse_parameters {
OPTIND=1
while getopts c:d:r:t:l:e:hnksv opt; do
  case $opt in
  c) CONFIG_FILE="$OPTARG" ;;
  d) KEEPCHANGES="$OPTARG" ;;
  r) TRACEABLE="$OPTARG" ;;
  t) ORIGSTORE="$OPTARG" ;;
  l) LOGFILES="$OPTARG" ;;
  e) EXCLUDEFILE="$OPTARG" ;;
  h) usage; exit 0 ;;
  n) RUNMODE=Trial ;;
  k) RUNMODE=Keep ;;
  s) RUNMODE=Sync ;;
  v) VERBOSE=Yes ;;
  \?) usage; exit 1 ;;
  esac
done
}

parse_parameters "$@"
if [ -f "$CONFIG_FILE" ]
then
  source "$CONFIG_FILE"
else
  echo Error: no config file found.
  usage
  exit 1
fi

function vmes {
  if [ "$VERBOSE" == Yes ]; then echo "$1"; fi
}

parse_parameters "$@"
function create_directory {
  vmes "There isn't the '$1'."
  read -p "Create the directory '$1'? Yes/[No]: " answer
  if [ "$answer" == "Yes" ]; then
    mkdir -p "$1"
  else
    usage
    exit 1;
  fi
}
if [ ! -d "$KEEPCHANGES" ]; then create_directory "$KEEPCHANGES"; fi
if [ ! -d "$ORIGSTORE" ]; then create_directory "$ORIGSTORE"; fi
if [ ! -d "$LOGFILES" ]; then create_directory "$LOGFILES"; fi

function keep_path {
SRC_DIR="$1"	# Absolute path.
if [ ! -d "$SRC_DIR" ]
then 
  echo "Error: no source '$SRC_DIR' directory."
  return 1 # Try others directory.
fi

if [ -f "$SRC_DIR/$EXCLUDEFILE" ]
then
  EXCLUDE_FILE="--exclude-from=$SRC_DIR/$EXCLUDEFILE"
else
  EXCLUDE_FILE="--exclude-from="
fi

KEEP_DIR="${KEEPCHANGES}${SRC_DIR}"
ARCH_DIR="${ORIGSTORE}${SRC_DIR}"

if [ ! -d $ARCH_DIR ] # Is it the first time launch?
then
  mkdir -p $ARCH_DIR
  vmes "First time keep the '$SRC_DIR'"
  vmes "in the '$ARCH_DIR' ... "
  $RSYNC_EXE "$EXCLUDE_FILE" -rclpgo $SRC_DIR/ $ARCH_DIR
  vmes "DONE."
  return 0
fi

itemized_changes=$($RSYNC_EXE -rclpgoin "$EXCLUDE_FILE" --del $SRC_DIR/ $ARCH_DIR) # Dry run.
changes=$(echo $itemized_changes | wc -w)
# Has the '$SRC_DIR' been changed?
if [ "$changes" != 0 ]; then
  vmes "The following files have been changed:"
  echo "$itemized_changes"
  echo "in the '$SRC_DIR'."
  if   [ "$RUNMODE" == Trial ]; then
    return 0
  elif [ "$RUNMODE" == Sync  ]; then
    answer=Sync
  elif [ "$RUNMODE" == Keep  ]; then
    answer=Keep
  else
    vmes "Keep the changes or sync (all the changes will be ignored) with backup?"
    read -p "Keep/Sync/[Not now]: " answer
  fi
  if [ "$answer" == "Sync" ]; then
    $RSYNC_EXE -rclpgo "$EXCLUDE_FILE" --del $SRC_DIR/ $ARCH_DIR
    return 0
  elif [ "$answer" != "Keep" ]; then
    return 0
  fi
else
  vmes "The '$SRC_DIR' hasn't been changed."
  return 0
fi

TMP_DIR=$(mktemp -d --tmpdir kcXXXX)
mkdir -p $TMP_DIR/old

# Three main lines. Trailing '/' very important. See man rsync.
$RSYNC_EXE -rmclpgo "$EXCLUDE_FILE" --compare-dest="$ARCH_DIR" "$SRC_DIR/" $TMP_DIR/new_with_dir
$RSYNC_EXE -rmclpgo "$EXCLUDE_FILE" $TMP_DIR/new_with_dir/ $TMP_DIR/new  #For skip empty directory
$RSYNC_EXE -rclpgob "$EXCLUDE_FILE" --backup-dir=$TMP_DIR/old --del "$SRC_DIR/" "$ARCH_DIR"

echo $(date --rfc-3339=ns) > $TMP_DIR/Changelog_new
echo "$itemized_changes"  >> $TMP_DIR/Changelog_new
echo '************************************************' >> $TMP_DIR/Changelog_new
changelog_file=$LOGFILES/$(echo "${SRC_DIR##/}" | tr / _).log
touch "$changelog_file"
cat "$changelog_file" >> $TMP_DIR/Changelog_new
/usr/bin/mv -fT $TMP_DIR/Changelog_new "$changelog_file"

CURDIR=$(pwd)
cd $TMP_DIR/new
find -type f -or -type l |
  while read fpath
  do
    keep_file_changes "$fpath"
    /usr/bin/mv -fT "$TMP_DIR/new/$fpath" "$KEEP_DIR/$fpath"
    /usr/bin/rm -f "$TMP_DIR/old/$fpath"
  done
#find

cd $TMP_DIR/old
find -type f -or -type l |
  while read fpath
  do
    keep_file_changes "$fpath"
    /usr/bin/rm -f "$KEEP_DIR/$fpath"
  done
#find

cd "$CURDIR"
rm -rf $TMP_DIR
}
# END OF keep_path

function keep_file_changes {
  local fpath="$1"
  mkdir -p $(dirname "$KEEP_DIR/${fpath}")
  cd $TMP_DIR
  if   [ ! -a "old/$fpath" -a -L "new/$fpath" ]; then
    echo "The symbolic link created."  > $TMP_DIR/changes
  elif [ ! -a "new/$fpath" -a -L "old/$fpath" ]; then
    echo "The symbolic link deleted."  > $TMP_DIR/changes
  else
    diff -uN --no-dereference "old/$fpath" "new/$fpath" > $TMP_DIR/changes
  fi
  touch "$KEEP_DIR/${fpath}.changes"	# First time the file is missing.
  cat "$KEEP_DIR/${fpath}.changes" >> $TMP_DIR/changes
  /usr/bin/mv -fT $TMP_DIR/changes "$KEEP_DIR/${fpath}.changes"
}

for s in $TRACEABLE
do
  keep_path "$s"
done
